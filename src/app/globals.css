@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground: 233 40% 4%;
  --background: 0 0% 100%;
  --primary: 51 98% 51%;
  --secondary: 231 17% 84%;
  --accent: 20 92% 52%;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground: 233 40% 96%;
    --background: 233 90% 4%;
    --primary: 50 92% 61%;
    --secondary: 231 17% 16%;
    --accent: 20 92% 48%;
  }
}

@layer base {
  .loop {
    --time: 1s;
    display: grid;
 }
 
 /* show animation only if user hasn't set a preference,
    otherwise just show stacked images */
 @media (prefers-reduced-motion: no-preference) {
   .loop img {   
     grid-area: 1/1;
     animation: rotate calc(var(--time) * 3) linear 0s infinite, shake 1s linear infinite;
   }
    
   .loop img:nth-child(2) { animation-delay: calc(var(--time) * -2); }
   .loop img:nth-child(3) { animation-delay: calc(var(--time) * -1); }
 }
 
 @keyframes rotate {
    /* 33.33% is (100% / number of images) */
    0%, 33.33% { opacity: 1; }
    /* 33.34% is (100% / number of images) + 0.01 */
    33.34%, 100% { opacity: 0; }  
 }

  @keyframes shake {
    0% { transform: translate(1px, 1px) rotate(0deg); }
    10% { transform: translate(-1px, -2px) rotate(-1deg); }
    20% { transform: translate(-3px, 0px) rotate(1deg); }
    30% { transform: translate(3px, 2px) rotate(0deg); }
    40% { transform: translate(1px, -1px) rotate(1deg); }
    50% { transform: translate(-1px, 2px) rotate(-1deg); }
    60% { transform: translate(-3px, 1px) rotate(0deg); }
    70% { transform: translate(3px, 1px) rotate(-1deg); }
    80% { transform: translate(-1px, -1px) rotate(1deg); }
    90% { transform: translate(1px, 2px) rotate(0deg); }
    100% { transform: translate(1px, -2px) rotate(-1deg); }
  }

  .shakeImg {
    animation: shake 1s;

    /* When the animation is finished, start again */
    animation-iteration-count: infinite;
  
    /* animation: gifLikeAnimation 2s infinite; */
  }
 
}
/* 
body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
} */
